pca.train <- new_my_data[1:nrow(train),]
pca.test <- new_my_data[-(1:nrow(train)),]
View(pca.test)
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
prin_comp$rotation
prin_comp$rotation[1:5,1:4]
prin_comp$rotation[1:5,1:4]
dim(prin_comp$x)
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var[1:10]
table(combi$Outlet_Size, combi$Outlet_Type)
combi$Item_Visibility = ifelse(combi$Item_Visibility == 0, median(combi$Item_Visibility), combi$Item_Visibility)
train = read.csv("trainRon.csv")
test = read.csv("testRon.csv")
test$Item_Outlet_Sales = 1
combi = rbind(train,test)
combi$Item_Weight[is.na(combi$Item_Weight)] = median(combi$Item_Weight, na.rm = TRUE)
combi$Item_Visibility = ifelse(combi$Item_Visibility == 0, median(combi$Item_Visibility), combi$Item_Visibility)
table(combi$Outlet_Size, combi$Outlet_Type)
levels(combi$Outlet_Size)[1] <- "Other"
my_data = subset(combi, select = -c(Item_Outlet_Sales, Item_Identifier, Outlet_Identifier))
colnames(my_data)
str(my_data)
library(dummies)
new_my_data <- dummy.data.frame(my_data, names = c("Item_Fat_Content","Item_Type",
"Outlet_Establishment_Year","Outlet_Size",
"Outlet_Location_Type","Outlet_Type"))
str(new_my_data)
pca.train <- new_my_data[1:nrow(train),]
pca.test <- new_my_data[-(1:nrow(train)),]
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
prin_comp$rotation
prin_comp$rotation[1:5,1:4]
dim(prin_comp$x)
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var[1:10]
prop_varex <- pr_var/sum(pr_var)
prop_varex[1:20]
prop_varex[1:20]
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
install.packages("rpart")
#add a training set with principal components
train.data <- data.frame(Item_Outlet_Sales = train$Item_Outlet_Sales, prin_comp$x)
#we are interested in first 30 PCAs
train.data <- train.data[,1:31]
#add a training set with principal components
train.data <- data.frame(Item_Outlet_Sales = train$Item_Outlet_Sales, prin_comp$x)
#we are interested in first 30 PCAs
train.data <- train.data[,1:31]
#run a decision tree
install.packages("rpart")
library(rpart)
rpart.model <- rpart(Item_Outlet_Sales ~ .,data = train.data, method = "anova")
rpart.model
#transform test into PCA
test.data <- predict(prin_comp, newdata = pca.test)
test.data <- as.data.frame(test.data)
#select the first 30 components
test.data <- test.data[,1:30]
View(test.data)
rpart.model
modell = pcr(Item_Outlet_Sales~.,data-train.data, validation="CV")
library(pls)
modell = pcr(Item_Outlet_Sales~.,data-train.data, validation="CV")
modell = pcr(Item_Outlet_Sales~., data = train.data, validation="CV")
modell$coefficients
modell.predict = predict(modell,test.data)
#make prediction on test data
rpart.prediction <- predict(rpart.model, test.data)
View(rpart.model)
#make prediction on test data
rpart.prediction <- predict(rpart.model, test.data)
PCAfit=pcr(DepRate~., data=Model, scale=TRUE, validation="CV")
summary(PCAfit)
# Plot the root mean squared error
validationplot(PCAfit)
# Plot the root mean squared error
par(mfrow = c(1,1))
validationplot(PCAfit)
validationplot(PCAfit, val.type = R2)
validationplot(PCAfit, val.type = "R2")
predplot(PCAfit)
install.packages("dplyr")
View(Model)
library(dplyr)
library(caret)
set.seed(12345)
data(iris)
force(iris)
d=data(iris)
help("createDataPartition")
trainIndex = createDataPartition(Model$DepRate, p=0.9, list=FALSE)
DepRateTrain = Model[trainIndex,]
DepRateTest = Model[-trainIndex,]
View(DepRateTrain)
View(DepRateTest)
set.seed(12345)
trainIndex = createDataPartition(Model$DepRate, p=0.9, list=FALSE)
DepRateTrain = Model[trainIndex,]
DepRateTest = Model[-trainIndex,]
View(DepRateTrain)
View(DepRateTest)
library(dplyr)
trainIndex2 = sample_frac(Model,0.9,replace=FALSE)
DepRateTrain = Model[trainIndex2,]
DepRateTest = Model[-trainIndex2,]
set.seed(12345)
trainIndex = createDataPartition(Model$DepRate, p=0.9, list=FALSE)
DepRateTrain = Model[trainIndex2,]
DepRateTest = Model[-trainIndex2,]
trainIndex = createDataPartition(Model$DepRate, p=0.9, list=FALSE)
DepRateTrain = Model[trainIndex,]
DepRateTest = Model[-trainIndex,]
PCAfit=pcr(DepRateTrain~., data=Model, scale=TRUE, validation="CV")
PCAfit=pcr(DepRate~., data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
PCApred=predict(PCAfit,DepRateTest,ncomp=12)
view(PCApred)
View(PCApred)
help(merge)
New= merge(PCApred,DepRateTest)
View(New)
plot(PCAfit$residuals)
plot(PCAfit)
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit, col="grey", pch=20)
abline(DepFitTrans2, col="darkorange", lwd=3)
abline(DepFit, col="darkorange", lwd=3)
par (mfrow=c(1,2))
plot(PCAfit, col="grey", pch=20)
abline(DepFit, col="darkorange", lwd=3)
plot(Model~DepRate, col="grey", pch=20)
plot(Model~DepRate, col="grey", pch=20)
plot(Model$DepRate, col="grey", pch=20)
abline(PCAfit, col="darkorange", lwd=3)
plot(PCAfit, col="grey", pch=20)
abline(PC, col="darkorange", lwd=3)
par (mfrow=c(1,2))
plot(PCAfit, col="grey", pch=20)
abline(PC, col="darkorange", lwd=3)
abline(PCAfit, col="darkorange", lwd=3)
plot(fitted(PCAfit),resid(PCAfit),pch=20)
abline(h=0,col="darkorange", lwd=2)
plot(PCAfit$residuals, col="grey",pch=20)
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit=pcr(DepRate~., data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit=pcr(log1p(DepRate)~., data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit=pcr((DepRate)~., data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
plot(DepFitTrans2)
ModelStep5=step(DepFitTrans2)
plot(DepFitTrans2)
DepFitTrans2=lm(log1p(DepRate) ~ KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev +  ReactordP + ReactorCauLev +
ClaydP , data = Model)
summary(DepFitTrans2)
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitTrans2
PCAfit=pcr(log1p(DepRate)~., data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit=pcr(log1p(DepRate)~., data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev +  ReactordP + ReactorCauLev +
ClaydP, data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
summary(DepFitReduced2)
PCAfit=pcr(llog1p(DepRate) ~ KerFeed + KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev + ReactorIP + ReactordP + ReactorCauLev +
ClaydP + ClayOP, data=DepRateTrain, scale=TRUE, validation="CV")
PCAfit=pcr(log1p(DepRate) ~ KerFeed + KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev + ReactorIP + ReactordP + ReactorCauLev +
ClaydP + ClayOP, data=DepRateTrain, scale=TRUE, validation="CV")
PCAfit$coefficients
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
validationplot(PCAfit, val.type = "R2")
PCAfit=pcr(log1p(DepRate) ~ KerFeed + KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev + ReactorIP + ReactordP + ReactorCauLev +
ClaydP + ClayOP, data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
par(mfrow = c(1,1))
validationplot(PCAfit, val.type = "R2")
summary(PCAfit)
validationplot(PCAfit, val.type = "R2")
PCApred=predict(PCAfit,DepRateTest,ncomp=12)
View(PCApred)
Prediction=exp(PCApred)
View(Prediction)
View(train.data)
View(DepRateTrain)
PCApred=predict(PCAfit,Model,ncomp=12)
Prediction=exp(PCApred)
View(Prediction)
install.packages("xlsx")
write.csv(Prediction,"C:\Users\rpdlpascual\Desktop\Trial for work")
help(write.csv)
View(test.data)
write.table(Prediction,C:\Users\rpdlpascual\Desktop,sep="\t")
write.table(Prediction,"C:/prediction.csv",sep="\t")
write.table(Prediction,"C:/Users/rpdlpascual/Desktop/prediction.txt",sep="\t")
PCAfit=pcr(log1p(DepRate) ~ KerFeed + KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev + ReactorIP + ReactordP + ReactorCauLev +
ClaydP + ClayOP, data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
PCAfit=pcr(log1p(DepRate) ~ log1p(KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + log1p(KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + log1p(KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + log1p(WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + log1p(ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + log1p(ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr((DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
ModelStep2=step(DepFitTrans)
DepFitReduced2=lm(log1p(DepRate) ~ KerFeed + KerTemp + WaterLev + BrineLev + WaterpH +
WCBootLev + ECPdP + ECPLev + ReactorIP + ReactordP + ReactorCauLev +
ClaydP + ClayOP, data = Model)
summary(DepFitReduced2)
DepFitReduced2$coefficients
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitReduced2)
#Stepwise Log Transformation of Response Variable
ModelStep2=step(DepFitTrans)
DepFitReduced2=lm(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) +
(BrineLev) + (WaterpH) + (WCBootLev) + (ECPdP) +
(ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data = Model)
summary(DepFitReduced2)
DepFitReduced2$coefficients
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitReduced2)
#Stepwise Log Transformation of Response Variable
ModelStep2=step(DepFitTrans)
DepFitReduced2=lm(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) +
(BrineLev) + (WaterpH) + (WCBootLev) + (ECPdP) +
(ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + log1p(ClayOP), data = Model)
summary(DepFitReduced2)
DepFitReduced2$coefficients
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitReduced2)
#Stepwise Log Transformation of Response Variable
ModelStep2=step(DepFitTrans)
DepFitReduced2=lm(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) +
(BrineLev) + (WaterpH) + (WCBootLev) + (ECPdP) +
(ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
log1p(ClaydP) + (ClayOP), data = Model)
summary(DepFitReduced2)
DepFitReduced2$coefficients
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitReduced2)
#Stepwise Log Transformation of Response Variable
ModelStep2=step(DepFitTrans)
DepFitReduced2=lm(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) +
(BrineLev) + (WaterpH) + (WCBootLev) + (ECPdP) +
(ECPLev) + (ReactorIP) + (ReactordP) + log1p(ReactorCauLev) +
(ClaydP) + (ClayOP), data = Model)
summary(DepFitReduced2)
DepFitReduced2$coefficients
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitReduced2)
DepFitReduced2=lm(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) +
(BrineLev) + (WaterpH) + (WCBootLev) + (ECPdP) +
(ECPLev) + (ReactorIP) + log1p(ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data = Model)
#Stepwise Log Transformation of Response Variable
ModelStep2=step(DepFitTrans)
DepFitReduced2=lm(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) +
(BrineLev) + (WaterpH) + (WCBootLev) + (ECPdP) +
(ECPLev) + (ReactorIP) + log1p(ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data = Model)
summary(DepFitReduced2)
DepFitReduced2$coefficients
par (mfrow=c(2,2),mar=c(2,2,2,2))
plot(DepFitReduced2)
#Predictor Transformations
a=Model$DepRate
b=Model$KerFeed
par(mfrow = c(1,2))
plot(a~b, data=Model, col="dodgerblue", pch=20, cex=1.5)
PreModel=lm(a~b,data=Model)
abline(PreModel, col="darkorange", lwd=2)
plot(fitted(PreModel),col="dodgerblue", pch=20, cex=1.5, xlab="Fitted", ylab="Residuals", ylim=c(-5,18))
abline(h=0,lty=1,col="darkorange", lwd=2)
#attempts
a=Model$DepRate
b=Model$ECPdP
par(mfrow = c(1,2))
plot(a~b, data=Model, col="dodgerblue", pch=20, cex=1.5)
PreModel=lm((a)~((b)),data=Model)
abline(PreModel, col="darkorange", lwd=2)
plot(fitted(PreModel),col="dodgerblue", pch=20, cex=1.5, xlab="Fitted", ylab="Residuals",)
abline(h=0,lty=1,col="darkorange", lwd=2)
plot(fitted(PCAfit),col="dodgerblue", pch=20, cex=1.5, xlab="Fitted", ylab="Residuals")
abline(h=0,lty=1,col="darkorange", lwd=2)
set.seed(12345)
trainIndex = createDataPartition(Model$DepRate, p=0.9, list=FALSE)
DepRateTrain = Model[trainIndex,]
DepRateTest = Model[-trainIndex,]
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=DepRateTrain, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
ModelStep6=step(PCAfit)
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=Model, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
# Plot the root mean squared error
par(mfrow = c(1,1))
validationplot(PCAfit, val.type = "R2")
predplot(PCAfit)
PCApred=predict(PCAfit,Model,ncomp=12)
Prediction=exp(PCApred)
View(Prediction)
write.table(Prediction2,"C:/Users/rpdlpascual/Desktop/prediction.txt",sep="\t")
PCAfit=pcr(log1p(DepRate) ~ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) + (ReactorCauLev) +
(ClaydP) + (ClayOP), data=Model, scale=TRUE, validation="CV")
summary(PCAfit)
par (mfrow=c(1,2))
plot(PCAfit$residuals, col="grey",pch=20)
abline(h=0,col="darkorange", lwd=2)
qqnorm(PCAfit$residuals, col="grey")
qqline(PCAfit$residuals,col="darkorange")
PCAfit$coefficients
# Plot the root mean squared error
par(mfrow = c(1,1))
validationplot(PCAfit, val.type = "R2")
predplot(PCAfit)
PCApred=predict(PCAfit,Model,ncomp=12)
Prediction=exp(PCApred)
View(Prediction2)
write.table(Prediction,"C:/Users/rpdlpascual/Desktop/prediction2.txt",sep="\t")
PCApred=predict(DepFitReduced2,Model)
Prediction=exp(PCApred)
View(Prediction)
write.table(Prediction,"C:/Users/rpdlpascual/Desktop/prediction3.txt",sep="\t")
summary(DepFitTrans2)
