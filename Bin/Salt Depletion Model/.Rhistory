x=log1p((Model3$DepRate)+20)
y=(Model3$DepRate)
hist(x)
hist(y)
par(mfrow=c(1,2))
x=log1p((Model3$DepRate)+100)
y=(Model3$DepRate)
hist(x)
hist(y)
par(mfrow=c(1,2))
x=log1p((Model3$DepRate)+300)
y=(Model3$DepRate)
hist(x)
hist(y)
par(mfrow=c(1,2))
x=log1p((Model3$DepRate)+500)
y=(Model3$DepRate)
hist(x)
hist(y)
par(mfrow=c(1,2))
x=log1p((Model3$DepRate)+300)
y=(Model3$DepRate)
hist(x)
hist(y)
par(mfrow=c(1,2))
x=log1p((Model3$DepRate)+350)
y=(Model3$DepRate)
hist(x)
hist(y)
qqplot(x)
qqplot(log1p((Model3$DepRate)+350))
shapiro.test(x)
shapiro.test(y)
x=log1p((Model3$DepRate)+1000)
hist(x)
shapiro.test(x)
x=log1p((Model3$DepRate)+350)
shapiro.test(x)
x=log1p((Model3$DepRate)+150)
shapiro.test(x)
shapiro.test(x)
x=log1p((Model3$DepRate))
shapiro.test(x)
qqnorm(Model3$DepRate)
qqline(Model3$DepRate, col="dodgerblue")
qqline(Model3$DepRate, col="dodgerblue", lwd="3")
qqnorm(log1p(Model3$DepRate))
qqline(Model3$DepRate, col="dodgerblue", lwd="3")
qqnorm(DepFit)
qqnorm(log1p(Model3$DepRate))
qqline(log1p(Model3$DepRate), col="dodgerblue", lwd="3")
qqnorm(log1p(Model3$DepRate)+350)
qqline(log1p(Model3$DepRate), col="dodgerblue", lwd="3")
qqnorm(log1p(Model3$DepRate)+350)
qqline(log1p(Model3$DepRate), col="dodgerblue", lwd="3")
qqnorm(log1p(Model3$DepRate))
qqline(log1p(Model3$DepRate), col="dodgerblue", lwd="3")
qqnorm(Model3$DepRate)
qqnorm(Model3$DepRate)
qqline(Model3$DepRate, col="dodgerblue", lwd="3")
qqnorm(log1p(Model3$DepRate))
qqline(log1p(Model3$DepRate), col="dodgerblue", lwd="3")
qqnorm(Model3$DepRate)
qqline(Model3$DepRate, col="dodgerblue", lwd="3")
par(mfrow = c(1,2))
plot(hatvalues(DepFit))
abline(h=23/1596, col="red")
plot(rownames(Model),rstudent(DepFit))
abline(h=3,col="red")
#outliers
par(mfrow = c(1,2))
plot(hatvalues(DepFit))
abline(h=23/1596, col="red")
plot(rownames(Model3),rstudent(DepFit))
abline(h=3,col="red")
setwd("C:/Users/rpdlpascual/Desktop/Salt Depletion Model")
library(zoo)
library(lmtest)
library(MASS)
library(carData)
library(car)
library(lattice)
library(ggplot2)
library(caret)
library(pls)
library(caret)
library(dplyr)
library(olsrr)
Model = read.csv("SaltDepRateData3.csv")
DepFit=lm((DepRate)~.,data=Model)
summary(DepFit)
par (mfrow=c(1,1))
plot(fitted(DepFit), resid(DepFit), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Simple Linear Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFit$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFit$residuals,col="darkorange", lwd=2)
DepFitTrans=lm(log1p(DepRate)~., data=Model)
summary(DepFitTrans)
par (mfrow=c(1,1))
plot(fitted(DepFitTrans), resid(DepFitTrans), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFitTrans$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFitTrans$residuals,col="darkorange", lwd=2)
par (mfrow=c(1,1))
plot(fitted(DepFitTrans), resid(DepFitTrans), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
#Leverages and Outliers
par(mfrow = c(1,2))
#Plot for detecting outliers. Studentized deleted residuals
#(or externally studentized residuals) is the deleted residual divided
#by its estimated standard deviation. Studentized residuals are going to
#be more effective for detecting outlying Y observations than standardized
#residuals. If an observation has an externally studentized residual that is
#larger than 3 (in absolute value) we can call it an outlier.
ols_plot_resid_stud(DepFitTrans)
#outliers - R-student (y-values)
x=abs(rstudent(DepFitTrans))
which(x>3,)
#leverage (x-values), criteria (2*(k+1)/n) where k = # of predictors and n = #values
z=abs(hatvalues(DepFitTrans))
which(z>(44/1596),)
#zvsx plot
ols_plot_resid_lev(DepFitTrans)
#----------------------------------------------------------------
#----------------------------------------------------------------
#New Data without Influential Points
Model2 = read.csv("SaltDepRateData4.csv")
DepFit2=lm((DepRate)~.,data=Model2)
summary(DepFit2)
par (mfrow=c(1,1))
plot(fitted(DepFit2), resid(DepFit2), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Simple Linear Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFit2$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFit2$residuals,col="darkorange", lwd=2)
#Transformation
DepFitTrans2=lm(log1p(DepRate)~., data=Model2)
summary(DepFitTrans2)
par (mfrow=c(1,1))
plot(fitted(DepFitTrans2), resid(DepFitTrans2), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFitTrans2$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFitTrans2$residuals,col="darkorange", lwd=2)
ols_plot_resid_lev(DepFitTrans2)
#----------------------------------------------------------------
#----------------------------------------------------------------
#Test For Multicollinearity
#Heuristics, VIF>5 is significant. Try omitting these and see the effect on the moddle
#Recall Stepwise Log Transformation of Response Variable with highest Rsquared
#omit Reactor IP due to high multicollinearity
vif(DepFitTrans)
#----------------------------------------------------------------
#----------------------------------------------------------------
#Test For Multicollinearity
#Heuristics, VIF>5 is significant. Try omitting these and see the effect on the moddle
#Recall Stepwise Log Transformation of Response Variable with highest Rsquared
#omit Reactor IP due to high multicollinearity
w=vif(DepFitTrans)
which(w>5,)
cor.test(DepFitTrans)
corr(DepFitTrans)
install.packages("Hmisc")
install.packages("corrplot")
install.packages("PerformanceAnalytics")
library(Hmisc)
libary(corrplot)
library(corrplot)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
#----------------------------------------------------------------
#----------------------------------------------------------------
#Test For Multicollinearity
#Heuristics, VIF>5 is significant. Try omitting these and see the effect on the moddle
#Recall Stepwise Log Transformation of Response Variable with highest Rsquared
#omit Reactor IP due to high multicollinearity
w=vif(DepFitTrans)
which(w>5,)
DepFitTransCor = rcorr(as.matrix(Model))
DepFitTr
DepFitTransCor
DepFitTransCor
write.table(DepFitTransCor,"C:/Users/rpdlpascual/Desktop/DepFitTransCor.txt",sep="\t")
View(DepFitTransCor)
View(DepFitTransCor)
View(DepFitTransCor)
write.table(DepFitTransCor$r,"C:/Users/rpdlpascual/Desktop/DepFitTransCor.txt",sep="\t")
write.table(DepFitTransCor$n,"C:/Users/rpdlpascual/Desktop/DepFitTransCor2.txt",sep="\t")
write.table(DepFitTransCor$p,"C:/Users/rpdlpascual/Desktop/DepFitTransCor2.txt",sep="\t")
write.table(DepFitTransCor$n,"C:/Users/rpdlpascual/Desktop/DepFitTransCor3.txt",sep="\t")
DepFitTransCor
write.table(DepFitTransCor$P,"C:/Users/rpdlpascual/Desktop/DepFitTransCor3.txt",sep="\t")
corrplot(DepFitTransCor, type="upper", order="hclust", tl.col="black",tl.srt = 45)
res=cor(Model)
corrplot(res, type="upper", order="hclust", tl.col="black",tl.srt = 45)
res=cor(Model)
corrplot(res, type="upper", order="hclust", tl.col="black",tl.srt = 45)
res=cor(Model)
flattenCorrMatrix = function(cormat,pmat){
ut = upper.tri(cormat)
data.frame(
row=rownames(cormat)[row(cormat)[ut]],
column=rownames(cormat)[col(cormat)[ut]],
cor=(cormat)[ut],
p = pmat[ut]
)
}
res=rcorr(as.matrix(Model,[,2:22]))
attach(Model)
res=rcorr(as.matrix(Model,[,2:22]))
res=rcorr(as.matrix(Model[,2:22]))
flattenCorrMatrix(res$r,res$P)
res=rcorr(as.matrix(Model)
flattenCorrMatrix(res$r,res$P)
res=rcorr(as.matrix(Model))
flattenCorrMatrix(res$r,res$P)
res=rcorr(as.matrix(Model[,2:22]))
flattenCorrMatrix(res$r,res$P)
k=flattenCorrMatrix(res$r,res$P)
write.table(k,"C:/Users/rpdlpascual/Desktop/correlation.txt",sep="\t")
help("corrplot")
#Correlation Graph, insignificant correlations are crossed
corrplot(res$r, type="upper", order="hclust", p.mat=res$P, sig.level=0.05, insig="blank")
help(corrplot)
#Correlation Graph, insignificant correlations are crossed
corrplot(res$r, type="upper", order="hclust", p.mat=res$P, sig.level=0.05, insig="p-value")
help(corrplot)
#Correlation Graph, insignificant correlations are crossed
corrplot(res$r, type="upper", order="hclust", p.mat=res$P, sig.level=0.05, insig="label_sig")
#Correlation Graph, insignificant correlations are crossed
corrplot(res$r, type="upper", order="hclust", p.mat=res$P, sig.level=0.05, insig="n")
#Correlation Graph, insignificant correlations are crossed
corrplot(res$r, type="upper", order="hclust", p.mat=res$P, sig.level=0.05, insig="blank")
#Correlation Graph, insignificant correlations are crossed
corrplot(res$r, type="upper", order="hclust", p.mat=res$P, sig.level=0.05, insig="blank")
View(Model)
#NewModel Accounting for Multicollinearity
DepFitTransInt=lm(log1p(DepRate)~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8
+ KerFeed, data=Model)
#NewModel Accounting for Multicollinearity
DepFitTransInt=lm(log1p(DepRate)~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8
+ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) +
(ReactorCauLev) + (ClaydP) + (ClayOP) , data=Model)
summary(DepFitTransInt)
summary(DepFitTrans)
#NewModel Accounting for Multicollinearity
DepFitTransInt=lm(log1p(DepRate)~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8
+ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) +
(ReactorCauLev) + (ClaydP) + (ClayOP) + KerFeed:ReactorIP, data=Model)
summary(DepFitTransInt)
#NewModel Accounting for Multicollinearity
DepFitTransInt=lm(log1p(DepRate)~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8
+ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) +
(ReactorCauLev) + (ClaydP) + (ClayOP) + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + D1:D6, data=Model)
summary(DepFitTransInt)
#NewModel Accounting for Multicollinearity
DepFitTransInt=lm(log1p(DepRate)~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8
+ (KerFeed) + (KerTemp) + (WaterLev) + (BrineLev) + (WaterpH) +
(WCBootLev) + (ECPdP) + (ECPLev) + (ReactorIP) + (ReactordP) +
(ReactorCauLev) + (ClaydP) + (ClayOP) + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + KerFeed:KerTemp +
KerFeed:WaterpH + KerTemp:ReactorIP + WaterLev:WaterpH, data=Model)
summary(DepFitTransInt)
par (mfrow=c(1,1))
plot(fitted(DepFitTrans), resid(DepFitTrans), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
par (mfrow=c(1,1))
plot(fitted(DepFitTransInt), resid(DepFitTransInt), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFitTransInt$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFitTransInt$residuals,col="darkorange", lwd=2)
qqnorm(DepFitTransInt$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFitTransInt$residuals,col="darkorange", lwd=2)
plot(fitted(DepFitTransInt), resid(DepFitTransInt), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
summary(DepFitTransInt)
vif(DepFitTransInt)
which(w>5,)
ModelStep = step(DepFitTransInt)
DepFitTransIntReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + BrineLev + WaterpH + ECPdP + ECPLev +
ReactorIP + ReactorCauLev + ClaydP + ClayOP + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + KerFeed:KerTemp + KerFeed:WaterpH +
KerTemp:ReactorIP + WaterLev:WaterpH, data=Model)
vif(DepFitTransIntReduced)
DepFitTransIntReduced = lm(log1p(DepRate) ~ KerFeed +
KerTemp + WaterLev + BrineLev + WaterpH + ECPdP + ECPLev +
ReactorIP + ReactorCauLev + ClaydP + ClayOP + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + KerFeed:KerTemp + KerFeed:WaterpH +
KerTemp:ReactorIP + WaterLev:WaterpH, data=Model)
vif(DepFitTransIntReduced)
summary(DepFitTransIntReduced)
summary(DepFitTransIntReduced)
DepFitTransIntReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + BrineLev + WaterpH + ECPdP + ECPLev +
ReactorIP + ReactorCauLev + ClaydP + ClayOP + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + KerFeed:KerTemp + KerFeed:WaterpH +
KerTemp:ReactorIP + WaterLev:WaterpH, data=Model)
summary(DepFitTransIntReduced)
ModelStep = step(DepFitTransInt)
step(DepFitTransIntReduced)
summary(DepFitTransIntReduced)
summary(DepFitTransIntReduced)
g=DepFitTransIntReduced$coefficients
ols_plot_resid_lev(DepFitTransIntReduced)
g=DepFitTransIntReduced$coefficients
write.table(g,"C:/Users/rpdlpascual/Desktop/coefficients.txt",sep="\t")
ModelStep = step(DepFitTransInt)
#NO INTERACTIONS
ModelStep2 = step(DepFitTrans)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model)
summary(DepFitTransReduced)
vif(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~  KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model)
vif(DepFitTransReduced)
summary(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauL
summary(DepFitTransReduced)
summary(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model)
summary(DepFitTransReduced)
vif(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~  D5 +  KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev +
ReactorCauLev, data=Model)
summary(DepFitTransReduced)
vif(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model)
summary(DepFitTransReduced)
vif(DepFitTransReduced)
#NO INTERACTIONS
ModelStep2 = step(DepFitTrans)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + KerFeed:KerTemp + KerFeed:WaterpH +
KerTemp:ReactorIP + WaterLev:WaterpH , data=Model)
summary(DepFitTransReduced)
vif(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP  , data=Model)
ReactorCauLev + ClaydP + ClayOP  , data=Model)
summary(DepFitTransReduced)
vif(DepFitTransReduced)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP , data=Model)
ModelStep2 = step(DepFitTrans)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP , data=Model)
summary(DepFitTransReduced)
j=DepFitTransReduced$coefficients
ModelStep2 = step(DepFitTrans)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP , data=Model)
summary(DepFitTransReduced)
j=DepFitTransReduced$coefficients
write.table(j,"C:/Users/rpdlpascual/Desktop/coefficients2.txt",sep="\t")
#PCA
PCAfit=pcr(log1p(DepRate)~., data=Model, scale=TRUE, validation="CV")
PCAfit$coefficients
PCAfit$projection
PCAfit$coefficients
l=PCAfit$coefficients
write.table(l,"C:/Users/rpdlpascual/Desktop/coefficients3.txt",sep="\t")
PCAfit=pcr(log1p(DepRate)~., data=Model, scale=TRUE, validation="CV")
PCApred=predict(PCAfit,Model)
Prediction=exp(PCApred)
write.table(Prediction,"C:/Users/rpdlpascual/Desktop/prediction3.txt",sep="\t")
PCAfit=pcr(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model, scale=TRUE, validation="CV")
PCApred=predict(PCAfit,Model)
Prediction=exp(PCApred)
write.table(Prediction,"C:/Users/rpdlpascual/Desktop/prediction3.txt",sep="\t")
PCAfit=pcr(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model, scale=TRUE, validation="CV")
PCApred=predict(PCAfit,Model)
Prediction=exp(PCApred)
write.table(Prediction,"C:/Users/rpdlpascual/Desktop/prediction3.txt",sep="\t")
Predict1 = preict(DepFitTransIntReduced,Model)
Predict1 = predict(DepFitTransIntReduced,Model)
Predict1 = exp(predict(DepFitTransIntReduced,Model))
DepFitTransIntReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + BrineLev + WaterpH + ECPdP + ECPLev +
ReactorIP + ReactorCauLev + ClaydP + ClayOP + KerFeed:ReactorIP +
ReactorIP:ClayOP + KerFeed:ClayOP + KerFeed:KerTemp + KerFeed:WaterpH +
KerTemp:ReactorIP + WaterLev:WaterpH, data=Model)
summary(DepFitTransIntReduced)
g=DepFitTransIntReduced$coefficients
Predict1 = exp(predict(DepFitTransIntReduced,Model))
write.table(Predict1,"C:/Users/rpdlpascual/Desktop/Predict1.txt",sep="\t" )
j=DepFitTransReduced$coefficients
Predict2 = exp(predict(DepFitTransReduced))
write.table(Predict2,"C:/Users/rpdlpascual/Desktop/Predict2.txt",sep="\t" )
ModelStep2 = step(DepFitTrans)
DepFitTransReduced = lm(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP , data=Model)
summary(DepFitTransReduced)
j=DepFitTransReduced$coefficients
Predict2 = exp(predict(DepFitTransReduced))
write.table(Predict2,"C:/Users/rpdlpascual/Desktop/Predict2.txt",sep="\t" )
ModelStep3=step(DepFitTrans2)
DepFitTrans2Reduced = lm(log1p(DepRate) ~ D1 + D2 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + BrineLev + WCBootLev + ECPdP + ECPLev +
ReactorIP + ClaydP + ClayOP, data=Model)
summary(DepFitTrans2Reduced)
Predict3=predict(DepFitTrans2Reduced,Model)
write.table(Predict3,"C:/Users/rpdlpascual/Desktop/Predict3.txt",sep="\t" )
#New Data without Influential Points
Model2 = read.csv("SaltDepRateData4.csv")
DepFit2=lm((DepRate)~.,data=Model2)
summary(DepFit2)
par (mfrow=c(1,1))
plot(fitted(DepFit2), resid(DepFit2), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Simple Linear Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFit2$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFit2$residuals,col="darkorange", lwd=2)
#Transformation
DepFitTrans2=lm(log1p(DepRate)~., data=Model2)
summary(DepFitTrans2)
par (mfrow=c(1,1))
plot(fitted(DepFitTrans2), resid(DepFitTrans2), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFitTrans2$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFitTrans2$residuals,col="darkorange", lwd=2)
ols_plot_resid_lev(DepFitTrans2)
ModelStep3=step(DepFitTrans2)
DepFitTrans2Reduced = lm(log1p(DepRate) ~ D1 + D2 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + BrineLev + WCBootLev + ECPdP + ECPLev +
ReactorIP + ClaydP + ClayOP, data=Model)
summary(DepFitTrans2Reduced)
Predict3=predict(DepFitTrans2Reduced,Model)
write.table(Predict3,"C:/Users/rpdlpascual/Desktop/Predict3.txt",sep="\t" )
Predict3=exp(predict(DepFitTrans2Reduced,Model))
write.table(Predict3,"C:/Users/rpdlpascual/Desktop/Predict3.txt",sep="\t" )
RealModel = read.csv ("SaltDepRateData.csv")
#New Data without Influential Points
Model2 = read.csv("SaltDepRateData4.csv")
DepFit2=lm((DepRate)~.,data=Model2)
summary(DepFit2)
par (mfrow=c(1,1))
plot(fitted(DepFit2), resid(DepFit2), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Simple Linear Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFit2$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFit2$residuals,col="darkorange", lwd=2)
#Transformation
DepFitTrans2=lm(log1p(DepRate)~., data=Model2)
summary(DepFitTrans2)
par (mfrow=c(1,1))
plot(fitted(DepFitTrans2), resid(DepFitTrans2), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Transformed SLRM")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(DepFitTrans2$residuals, col="dodgerblue", pch = 20, xlab="Theoretical Quantiles", ylab="Standardized Residuals")
qqline(DepFitTrans2$residuals,col="darkorange", lwd=2)
ols_plot_resid_lev(DepFitTrans2)
ModelStep3=step(DepFitTrans2)
DepFitTrans2Reduced = lm(log1p(DepRate) ~ D1 + D2 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + BrineLev + WCBootLev + ECPdP + ECPLev +
ReactorIP + ClaydP + ClayOP, data=Model)
summary(DepFitTrans2Reduced)
Predict3=exp(predict(DepFitTrans2Reduced,RealModel))
write.table(Predict3,"C:/Users/rpdlpascual/Desktop/Predict3.txt",sep="\t" )
write.table(Predict3,"C:/Users/rpdlpascual/Desktop/Predict3.txt",sep="\t" )
Predict1 = exp(predict(DepFitTransIntReduced,RealModel))
write.table(Predict1,"C:/Users/rpdlpascual/Desktop/Predict1.txt",sep="\t" )
Predict2 = exp(predict(DepFitTransReduced, RealModel))
write.table(Predict2,"C:/Users/rpdlpascual/Desktop/Predict2.txt",sep="\t" )
PCAfit=pcr(log1p(DepRate) ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + KerFeed +
KerTemp + WaterLev + WaterpH + ECPdP + ECPLev + ReactorIP +
ReactorCauLev + ClaydP + ClayOP, data=Model, scale=TRUE, validation="CV")
PCApred=predict(PCAfit,RealModel)
Prediction4=exp(PCApred)
write.table(Prediction4,"C:/Users/rpdlpascual/Desktop/prediction4.txt",sep="\t")
PCAfit=pcr(log1p(DepRate) ~., data=Model, scale=TRUE, validation="CV")
PCApred=predict(PCAfit,RealModel)
Prediction4=exp(PCApred)
write.table(Prediction4,"C:/Users/rpdlpascual/Desktop/prediction5.txt",sep="\t")
